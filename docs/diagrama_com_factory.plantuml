@startuml diagrama_com_factory

'--------- Produto ---------------
abstract class Baralho {
    # cartaDirector : CartaDirector 
    # cartaBuilder : CartaBuilder
    # deck : Stack<CartaBaralho>

    + {abstract} shuffle() : void
    + {abstract} dealCard() : Card
    + {abstract} size() : int
    + {abstract} toString() : String
    + {abstract} hasCard() : boolean    
}

class BaralhoTradicional {
    - NUMBER_OF_CARDS : int
    - NUMBER_OF_CARDS_BY_SUIT : int
    - randomNumbers : Random

    + BaralhoTradicional()
}

class BaralhoUno {
    + BaralhoUno()

}

'------------------------------

'------------Creator-----------

abstract class BaralhoCreator {
    + {abstract} createBaralho() : Baralho
}

class BaralhoTradicionalCreator {
    + createBaralho() : Baralho
}

class BaralhoUnoCreator {
    + createBaralho() : Baralho
}

'-------------------------------

'------------Carta--------------
class CartaBaralho {
    - face : String
    - naipe : String
    - cor : Cor
    - valor : int

    + CartaBaralho(face: String, naipe : String, valor : int)
    + CartaBaralho(face : String, naipe : String, valor : int, cor : Cor)
    + getFace() : String
    + getValor() : int
    + getCor() : Cor
    + getNaipe() : String
    + setValue(value : int) : void
    + toString() : String
}

class CartaUno {
    - face : String
    - cor: Cor
    - valor : int

    + CartaUno(face: String, valor: int, cor : Cor)
    + getFace() : String
    + getValor() : int
    + getNaipe() : String
    + setValue(value : int) : void
    + toString() : String
}

interface CartaBuilder {
    + {abstract} reset() : void
    + {abstract} definirCor() : void
    + {abstract} definirRepresentacaoEmString() : void
    + {abstract} definirValor() : void
    + {abstract} definirFace() ; void
}

class CartaBaralhoBuilder {
    - resultado: CartaBaralho
    
    + reset() : void
    + definirCor() : void
    + definirRepresentacaoEmString() : void
    + definirValor() : void
    + obterResultado() : CartaBaralho
}

class CartaUnoBuilder {
    - resultado: CartaUno
    
    + reset() : void
    + definirCor() : void
    + definirRepresentacaoEmString() : void
    + definirValor() : void
    + obterResultado() : CartaUno
}

class CartaDirector {
    - cartaBuilder : CartaBuilder

    + CartaDirector(cartaBuilder : CartaBuilder)
    + makeCarta(tipoCarta : TipoCarta) : void
}

enum TipoCarta{
    UNO
    TRADICIONAL
}

enum Cor {
	PRETO
    VERMELHO
	AMARELO
    AZUL
    VERDE
	RESET
	
	- ansiCode : String;
	- value : String;

	+ Cor(ansiCode : String, cor : String)
	+ ansiCode() : String
	+ getValue() : String
}

'--------------------------------------------------

BaralhoTradicional ..|> Baralho
BaralhoUno ..|> Baralho

BaralhoTradicionalCreator --|> BaralhoCreator
BaralhoUnoCreator --|> BaralhoCreator

BaralhoCreator --> Baralho

BaralhoTradicional *-- CartaBaralho : "possui"

CartaUnoBuilder ..|> CartaBuilder
CartaBaralhoBuilder ..|> CartaBuilder

CartaBaralho --|> Cor
CartaUno --|> Cor

CartaDirector *-- CartaBuilder
CartaDirector ..> TipoCarta

@enduml
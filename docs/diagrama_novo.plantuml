@startuml diagrama_com_factory
' ----------------------------------------------------------------

interface Cor {
    +String reset()
    +String ansiCode()
    +String getValue()
}

enum CorCartaTradicional {
    +VERMELHO
    +PRETO

    -ansiCode: String
    -value: String

    +CorCartaTradicional(ansiCode: String, cor: String)
    +String reset()
    +String ansiCode()
    +String getValue()
}

enum CorCartaUNO {
    +VERMELHO
    +AMARELO
    +VERDE
    +AZUL

    -ansiCode: String
    -value: String

    +CorCartaUNO(ansiCode: String, cor: String)
    +String reset()
    +String ansiCode()
    +String getValue()
}

enum FaceCartaTradicional {
    +AS
    +DOIS
    +TRES
    +QUATRO
    +CINCO
    +SEIS
    +SETE
    +OITO
    +NOVE
    +DEZ
    +VALETE
    +DAMA
    +REI

    -nome: String
    -valor: int

    +FaceCartaTradicional(nome: String, valor: int)
    +String getNome()
    +int getValor()
}

enum FaceEspecialUNO {
    +INVERTER
    +PULAR
    +MAIS_DOIS
    +CORINGA
    +MAIS_QUATRO
    +TROCAR_MAO

    -nome: String
    -valor: int

    +FaceEspecialUNO(nome: String, valor: int)
    +String getNome()
    +int getValor()
}

enum FaceNumericaUNO {
    +FACE_0
    +FACE_1
    +FACE_2
    +FACE_3
    +FACE_4
    +FACE_5
    +FACE_6
    +FACE_7
    +FACE_8
    +FACE_9

    -nome: String
    -valor: int

    +FaceNumericaUNO(nome: String, valor: int)
    +String getNome()
    +int getValor()
}

enum Naipe {
    +HEARTS
    +DIAMONDS
    +CLUBS
    +SPADES

    -symbol: String

    +Naipe(symbol: String)
    +String getSymbol()
}

enum TipoBaralho {
    +TRADICIONAL
    +UNO
}

' ----------------------------------------------------------------

abstract class Carta implements Cloneable {
    -face: String
    -cores: List<Cor>
    -valor: int

    +Carta()
    +Carta(face: String, cores: List<Cor>, valor: int)
    +Carta(face: String, cor: Cor, valor: int)

    +String getFace()
    +void setFace(face: String)
    +List<Cor> getCores()
    +void setCores(cores: Cor...)
    +Cor getCor()
    +int getValor()
    +void setValor(valor: int)

    +abstract void setNaipe(naipe: Naipe)
    +abstract void setAcoes(acoes: String...)
    +abstract Naipe getNaipe()
    +abstract String[] getAcoes()

    +Carta clone()
}

class CartaFactory {
    +static Carta criarCarta(tipo: TipoBaralho): Carta
}

class CartaTradicional {
    -naipe: Naipe

    +CartaTradicional(face: String, naipe: Naipe, cor: CorCartaTradicional)
    +CartaTradicional()

    +String toString()
    +Naipe getNaipe()
    +String[] getAcoes()
    +void setAcoes(acoes: String...)
    +void setNaipe(naipe: Naipe)
}

class CartaUNO {
    -acoes: String[]

    +CartaUNO()
    +CartaUNO(face: String, valor: int, cor: Cor)
    +CartaUNO(face: String, valor: int, cores: List<Cor>)

    +List<Cor> getCores()
    +Naipe getNaipe()
    +String[] getAcoes()
    +void setNaipe(naipe: Naipe)
    +void setAcoes(acoes: String...)
    +String toString()
}

abstract class Baralho {
    -numeroDeCartas: int
    -faces: String[]
    -cartas: Stack<Carta>

    +Baralho()
    +Baralho(numeroDeCartas: int, faces: String[], cartas: Stack<Carta>)
    +void embaralhar()
    +Carta distribuirCarta()
    +int obterTamanho()
    +boolean temCarta()
    +void adicionarCarta(carta: Carta)
    +String toString()
}

interface BaralhoBuilder {
    +void redefinir()
    +void montarCartas()
    +void montarCartasEspeciais()
    +Baralho obterResultado()
    +void definirNaipe()
}

class BaralhoDirector {
    -baralhoBuilder: BaralhoBuilder

    +BaralhoDirector(baralhoBuilder: BaralhoBuilder)
    +void mudarDiretor(baralhoBuilder: BaralhoBuilder)
    +void construirBaralho(tipo: TipoBaralho)
}

class BaralhoTradicional {
    -static final NUMERO_DE_CARTAS: int = 52
    -static final NUMERO_DE_CARTAS_POR_NAIPE: int = 13

    +BaralhoTradicional()
    +BaralhoTradicional(numeroDeCartas: int, faces: String[], cartas: Stack<Carta>)
}

class BaralhoTradicionalBuilder {
    -baralhoTradicional: BaralhoTradicional

    +BaralhoTradicionalBuilder()
    +void redefinir()
    +void montarCartas()
    +void definirNaipe()
    +void montarCartasEspeciais()
    +BaralhoTradicional obterResultado()
}

class BaralhoUNO {
    -static final NUMERO_DE_CARTAS_NUMERICAS_POR_COR: int = 10
    -static final NUMERO_DE_CARTAS_ESPECIAIS_POR_COR: int = 3
    -static final NUMERO_DE_CARTAS_MULTICOR: int = 8

    +BaralhoUNO()
}

class BaralhoUNOBuilder {
    -baralhoUNO: BaralhoUNO

    +BaralhoUNOBuilder()
    +void redefinir()
    +void montarCartas()
    +void montarCartasEspeciais()
    +Baralho obterResultado()
    +void definirNaipe()

    -void montarCartasEspeciaisDeUmaCor()
    -void montarCartasEspeciasMulticor()
    -void criarCartaTrocaMao()
}

' ----------------------------------------------------------------

Baralho o-- Carta : possui
Baralho --> Carta : usa

BaralhoDirector --> BaralhoBuilder : usa
BaralhoDirector --> TipoBaralho : usa

BaralhoTradicional --|> Baralho : herda
BaralhoUNO --|> Baralho : herda

BaralhoTradicionalBuilder *-- BaralhoTradicional
BaralhoTradicionalBuilder ..|> BaralhoBuilder
BaralhoTradicionalBuilder --> CartaFactory
BaralhoTradicionalBuilder --> CorCartaTradicional
BaralhoTradicionalBuilder --> Naipe
BaralhoTradicionalBuilder --> FaceCartaTradicional
BaralhoTradicionalBuilder --> TipoBaralho

BaralhoUNOBuilder ..|> BaralhoBuilder
BaralhoUNOBuilder --> BaralhoUNO
BaralhoUNOBuilder --> CartaFactory
BaralhoUNOBuilder --> CorCartaUNO
BaralhoUNOBuilder --> TipoBaralho
BaralhoUNOBuilder --> FaceEspecialUNO
BaralhoUNOBuilder --> FaceNumericaUNO

Carta *-- Cor
Carta --> Naipe : usa

CartaFactory --> TipoBaralho : usa
CartaFactory --> Carta : usa

CartaTradicional --|> Carta : herda
CartaTradicional *-- Naipe : possui

CartaUNO --|> Carta : herda
CartaUNO --> Cor : usa

@enduml
